/*
   Pull from remote

   remote = the remote url
   args - arugments to pass
   resolve - open the merge resolve form if fail

   modified to do a temporary commit before the rebase
   fixed check for conflicts
*/

defmethod( Pull (( gs GitShell ) @key (remote "origin") (args "") (resolve t))

   ;Get the current branch
   Branch(gs)

   ;Check status. If clean then use a simple pull with rebase, else stash -> pull with rebase -> stash pop. 
   status_cmd =  strcat("cd " gs->path " && git status --porcelain .")
   response = Cmd(gs status_cmd)

   if(response=="" then
      syscmd = strcat("( cd " gs->root->str " && git pull --recurse-submodules --rebase " remote " " gs->branch " " args " )")
   else
      ;Info(gs "Making a temporary commit...")
      syscmd = strcat("( cd " gs->root->str " && git add -A && git commit -m \"temp commit\" && git pull --recurse-submodules --rebase && git reset --mixed HEAD^ )")
   )
   result=Cmd(gs syscmd)

   if(!result then
      ErrorCG(gs sprintf(nil "Pull failed\nCommand:%s\nResponse%s" syscmd result))
   else
      Info(gs result)
   )
   if( resolve && rexMatchp("CONFLICT" result) then
      response = Dialog(gs "Merge failed due to conflicts\nOpen the Merge conflict resolve form? (YES YOU SHOULD!!!)")
      if(response then
         gs->path = gs->root->str
         CGmergeResolveForm(gs)
      else
         ErrorCG(gs "Pull failed due to unresolved conflicts")
      )
   )
   Refresh(gs)
)
